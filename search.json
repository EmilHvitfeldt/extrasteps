[{"path":[]},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Emil Hvitfeldt Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E (2023). extrasteps: Steps 'recipes' Package. https://github.com/EmilHvitfeldt/extrasteps, https://emilhvitfeldt.github.io/extrasteps/.","code":"@Manual{,   title = {extrasteps: More Steps for the 'recipes' Package},   author = {Emil Hvitfeldt},   year = {2023},   note = {https://github.com/EmilHvitfeldt/extrasteps, https://emilhvitfeldt.github.io/extrasteps/}, }"},{"path":"https://emilhvitfeldt.github.io/extrasteps/index.html","id":"extrasteps","dir":"","previous_headings":"","what":"More Steps for the recipes Package","title":"More Steps for the recipes Package","text":"goal extrasteps provide additional steps recipes.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"More Steps for the recipes Package","text":"can install released version extrasteps CRAN : development version GitHub :","code":"install.packages(\"extrasteps\") # install.packages(\"devtools\") devtools::install_github(\"EmilHvitfeldt/extrasteps\")"},{"path":"https://emilhvitfeldt.github.io/extrasteps/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"More Steps for the recipes Package","text":"Please note extrasteps project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics required_pkgs","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/required_pkgs.extrasteps.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 methods for tracking which additional packages are needed for steps. — required_pkgs.step_combine_stringdist","title":"S3 methods for tracking which additional packages are needed for steps. — required_pkgs.step_combine_stringdist","text":"Recipe-adjacent packages always list required package steps can function properly within parallel processing schemes.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/required_pkgs.extrasteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 methods for tracking which additional packages are needed for steps. — required_pkgs.step_combine_stringdist","text":"","code":"# S3 method for step_combine_stringdist required_pkgs(x, ...)  # S3 method for step_date_after required_pkgs(x, ...)  # S3 method for step_date_before required_pkgs(x, ...)  # S3 method for step_date_nearest required_pkgs(x, ...)  # S3 method for step_difftime required_pkgs(x, ...)  # S3 method for step_encoding_binary required_pkgs(x, ...)  # S3 method for step_encoding_frequency required_pkgs(x, ...)  # S3 method for step_maxabs required_pkgs(x, ...)  # S3 method for step_minmax required_pkgs(x, ...)  # S3 method for step_robust required_pkgs(x, ...)  # S3 method for step_time_event required_pkgs(x, ...)  # S3 method for step_unit_normalize required_pkgs(x, ...)  # S3 method for step_yeet required_pkgs(x, ...)"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/required_pkgs.extrasteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 methods for tracking which additional packages are needed for steps. — required_pkgs.step_combine_stringdist","text":"x recipe step","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/required_pkgs.extrasteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 methods for tracking which additional packages are needed for steps. — required_pkgs.step_combine_stringdist","text":"character vector","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_combine_stringdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine factor levels using stringdist — step_combine_stringdist","title":"Combine factor levels using stringdist — step_combine_stringdist","text":"step_combine_stringdist creates specification recipe step combine factor levels low stringdist .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_combine_stringdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine factor levels using stringdist — step_combine_stringdist","text":"","code":"step_combine_stringdist(   recipe,   ...,   role = NA,   trained = FALSE,   distance = NULL,   res = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"combine_stringdist\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_combine_stringdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine factor levels using stringdist — step_combine_stringdist","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. distance Integer, value determine strings combined . value used inclusive, 2 combine levels string distance 2 lower. res list denoting way labels collapses stored preprocessing step trained prep(). columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_combine_stringdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine factor levels using stringdist — step_combine_stringdist","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_combine_stringdist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine factor levels using stringdist — step_combine_stringdist","text":"","code":"library(recipes) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: ‘recipes’ #> The following object is masked from ‘package:stats’: #>  #>     step library(tibble) data0 <- tibble(   x1 = c(\"a\", \"b\", \"d\", \"e\", \"sfgsfgsd\", \"hjhgfgjgr\"),   x2 = c(\"ak\", \"b\", \"djj\", \"e\", \"hjhgfgjgr\", \"hjhgfgjgr\")  )  rec <- recipe(~., data = data0) %>%   step_combine_stringdist(all_predictors(), distance = 1) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 6 × 2 #>   x1        x2        #>   <fct>     <fct>     #> 1 a         ak        #> 2 a         b         #> 3 a         djj       #> 4 a         b         #> 5 sfgsfgsd  hjhgfgjgr #> 6 hjhgfgjgr hjhgfgjgr  tidy(rec, 1) #> # A tibble: 12 × 4 #>    terms from      to        id                       #>    <chr> <chr>     <chr>     <chr>                    #>  1 x1    a         a         combine_stringdist_mwV9t #>  2 x1    b         a         combine_stringdist_mwV9t #>  3 x1    d         a         combine_stringdist_mwV9t #>  4 x1    e         a         combine_stringdist_mwV9t #>  5 x1    sfgsfgsd  sfgsfgsd  combine_stringdist_mwV9t #>  6 x1    hjhgfgjgr hjhgfgjgr combine_stringdist_mwV9t #>  7 x2    ak        ak        combine_stringdist_mwV9t #>  8 x2    b         b         combine_stringdist_mwV9t #>  9 x2    e         b         combine_stringdist_mwV9t #> 10 x2    djj       djj       combine_stringdist_mwV9t #> 11 x2    hjhgfgjgr hjhgfgjgr combine_stringdist_mwV9t #> 12 x2    hjhgfgjgr hjhgfgjgr combine_stringdist_mwV9t  rec <- recipe(~., data = data0) %>%   step_combine_stringdist(all_predictors(), distance = 2) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 6 × 2 #>   x1        x2        #>   <fct>     <fct>     #> 1 a         ak        #> 2 a         ak        #> 3 a         djj       #> 4 a         ak        #> 5 sfgsfgsd  hjhgfgjgr #> 6 hjhgfgjgr hjhgfgjgr  tidy(rec, 1) #> # A tibble: 12 × 4 #>    terms from      to        id                       #>    <chr> <chr>     <chr>     <chr>                    #>  1 x1    a         a         combine_stringdist_xcmT0 #>  2 x1    b         a         combine_stringdist_xcmT0 #>  3 x1    d         a         combine_stringdist_xcmT0 #>  4 x1    e         a         combine_stringdist_xcmT0 #>  5 x1    sfgsfgsd  sfgsfgsd  combine_stringdist_xcmT0 #>  6 x1    hjhgfgjgr hjhgfgjgr combine_stringdist_xcmT0 #>  7 x2    ak        ak        combine_stringdist_xcmT0 #>  8 x2    b         ak        combine_stringdist_xcmT0 #>  9 x2    e         ak        combine_stringdist_xcmT0 #> 10 x2    djj       djj       combine_stringdist_xcmT0 #> 11 x2    hjhgfgjgr hjhgfgjgr combine_stringdist_xcmT0 #> 12 x2    hjhgfgjgr hjhgfgjgr combine_stringdist_xcmT0"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_after.html","id":null,"dir":"Reference","previous_headings":"","what":"Time after Recurrent Date Time Event — step_date_after","title":"Time after Recurrent Date Time Event — step_date_after","text":"step_date_after creates specification recipe step create new columns indicating time recurrent event.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_after.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time after Recurrent Date Time Event — step_date_after","text":"","code":"step_date_after(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   rules = list(),   transform = \"identity\",   columns = NULL,   skip = FALSE,   id = rand_id(\"date_after\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_after.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time after Recurrent Date Time Event — step_date_after","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. rules Named list almanac rules. transform function character indication function used oon resulting variables. See details allowed names functions. columns character string variables used inputs. field placeholder populated prep.recipe() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_after.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time after Recurrent Date Time Event — step_date_after","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_after.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time after Recurrent Date Time Event — step_date_after","text":"transform argument can function takes numeric vector returns numeric vector length. can also character vector, supported vector names. functions come offset avoid Inf.   effect transform illustrated .  naming resulting variables form","code":"\"identity\" function(x) x  \"inverse\" function(x) 1 / (x + 0.5)  \"exp\" function(x) exp(x)  \"log\" function(x) log(x + 0.5) {variable name}_after_{name of rule}"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_after.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time after Recurrent Date Time Event — step_date_after","text":"","code":"library(recipes) library(extrasteps) library(almanac) library(modeldata)  data(Chicago)  on_easter <- yearly() %>% recur_on_easter() on_weekend <- weekly() %>% recur_on_weekends()  rules <- list(easter = on_easter, weekend = on_weekend)  rec_spec <- recipe(ridership ~ date, data = Chicago) %>%   step_date_after(date, rules = rules)  rec_spec_preped <- prep(rec_spec)  bake(rec_spec_preped, new_data = NULL) #> # A tibble: 5,698 × 3 #>    ridership date_after_easter date_after_weekend #>        <dbl>             <int>              <int> #>  1     15.7                274                  1 #>  2     15.8                275                  2 #>  3     15.9                276                  3 #>  4     15.9                277                  4 #>  5     15.4                278                  5 #>  6      2.42               279                  0 #>  7      1.47               280                  0 #>  8     15.5                281                  1 #>  9     15.9                282                  2 #> 10     15.9                283                  3 #> # … with 5,688 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_before.html","id":null,"dir":"Reference","previous_headings":"","what":"Time before Recurrent Date Time Event — step_date_before","title":"Time before Recurrent Date Time Event — step_date_before","text":"step_date_before creates specification recipe step create new columns indicating time recurrent event.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_before.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time before Recurrent Date Time Event — step_date_before","text":"","code":"step_date_before(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   rules = list(),   transform = \"identity\",   columns = NULL,   skip = FALSE,   id = rand_id(\"date_before\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_before.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time before Recurrent Date Time Event — step_date_before","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. rules Named list almanac rules. transform function character indication function used oon resulting variables. See details allowed names functions. columns character string variables used inputs. field placeholder populated prep.recipe() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_before.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time before Recurrent Date Time Event — step_date_before","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_before.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time before Recurrent Date Time Event — step_date_before","text":"transform argument can function takes numeric vector returns numeric vector length. can also character vector, supported vector names. functions come offset avoid Inf.   effect transform illustrated .  naming resulting variables form","code":"\"identity\" function(x) x  \"inverse\" function(x) 1 / (x + 0.5)  \"exp\" function(x) exp(x)  \"log\" function(x) log(x + 0.5) {variable name}_before_{name of rule}"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_before.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time before Recurrent Date Time Event — step_date_before","text":"","code":"library(recipes) library(extrasteps) library(almanac) library(modeldata)  data(Chicago)  on_easter <- yearly() %>% recur_on_easter() on_weekend <- weekly() %>% recur_on_weekends()  rules <- list(easter = on_easter, weekend = on_weekend)  rec_spec <- recipe(ridership ~ date, data = Chicago) %>%   step_date_before(date, rules = rules)  rec_spec_preped <- prep(rec_spec)  bake(rec_spec_preped, new_data = NULL) #> # A tibble: 5,698 × 3 #>    ridership date_before_easter date_before_weekend #>        <dbl>              <int>               <int> #>  1     15.7                  83                   5 #>  2     15.8                  82                   4 #>  3     15.9                  81                   3 #>  4     15.9                  80                   2 #>  5     15.4                  79                   1 #>  6      2.42                 78                   0 #>  7      1.47                 77                   0 #>  8     15.5                  76                   5 #>  9     15.9                  75                   4 #> 10     15.9                  74                   3 #> # … with 5,688 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_nearest.html","id":null,"dir":"Reference","previous_headings":"","what":"Time to Nearest Recurrent Date Time Event — step_date_nearest","title":"Time to Nearest Recurrent Date Time Event — step_date_nearest","text":"step_date_nearest creates specification recipe step create new columns indicating time nearest recurrent event.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_nearest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time to Nearest Recurrent Date Time Event — step_date_nearest","text":"","code":"step_date_nearest(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   rules = list(),   transform = \"identity\",   columns = NULL,   skip = FALSE,   id = rand_id(\"date_nearest\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_nearest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time to Nearest Recurrent Date Time Event — step_date_nearest","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. rules Named list almanac rules. transform function character indication function used oon resulting variables. See details allowed names functions. columns character string variables used inputs. field placeholder populated prep.recipe() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_nearest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time to Nearest Recurrent Date Time Event — step_date_nearest","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_nearest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time to Nearest Recurrent Date Time Event — step_date_nearest","text":"transform argument can function takes numeric vector returns numeric vector length. can also character vector, supported vector names. functions come offset avoid Inf.   effect transform illustrated .  naming resulting variables form","code":"\"identity\" function(x) x  \"inverse\" function(x) 1 / (x + 0.5)  \"exp\" function(x) exp(x)  \"log\" function(x) log(x + 0.5) {variable name}_nearest_{name of rule}"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_date_nearest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time to Nearest Recurrent Date Time Event — step_date_nearest","text":"","code":"library(recipes) library(extrasteps) library(almanac) library(modeldata)  data(Chicago)  on_easter <- yearly() %>% recur_on_easter() on_weekend <- weekly() %>% recur_on_weekends()  rules <- list(easter = on_easter, weekend = on_weekend)  rec_spec <- recipe(ridership ~ date, data = Chicago) %>%   step_date_nearest(date, rules = rules)  rec_spec_preped <- prep(rec_spec)  bake(rec_spec_preped, new_data = NULL) #> # A tibble: 5,698 × 3 #>    ridership date_nearest_easter date_nearest_weekend #>        <dbl>               <int>                <int> #>  1     15.7                   83                    1 #>  2     15.8                   82                    2 #>  3     15.9                   81                    3 #>  4     15.9                   80                    2 #>  5     15.4                   79                    1 #>  6      2.42                  78                    0 #>  7      1.47                  77                    0 #>  8     15.5                   76                    1 #>  9     15.9                   75                    2 #> 10     15.9                   74                    3 #> # … with 5,688 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_difftime.html","id":null,"dir":"Reference","previous_headings":"","what":"difftimearithmic Transformation — step_difftime","title":"difftimearithmic Transformation — step_difftime","text":"step_difftime creates specification recipe step calculate difftimes data.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_difftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"difftimearithmic Transformation — step_difftime","text":"","code":"step_difftime(   recipe,   ...,   role = NA,   trained = FALSE,   time = NULL,   tz = NULL,   unit = \"auto\",   columns = NULL,   skip = FALSE,   id = rand_id(\"difftime\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_difftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"difftimearithmic Transformation — step_difftime","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. time date-time date objects. Used reference. Must match type variable. tz optional time zone specification used conversion, mainly \"POSIXlt\" objects. unit character string. Units results desired. Must one \"auto\", \"secs\", \"mins\", \"hours\",\"days\",  \"weeks\" Defaults \"auto\". columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_difftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"difftimearithmic Transformation — step_difftime","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_difftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"difftimearithmic Transformation — step_difftime","text":"","code":"library(recipes) example_date <- data.frame(   dates = seq(as.Date(\"2010/1/1\"), as.Date(\"2016/1/1\"), by = \"quarter\")  )   example_datetime <- data.frame(   datetimes = seq(ISOdate(1993,1,1), ISOdate(1993,1,2), by = \"hour\")  )  rec <- recipe(~ dates, data = example_date) %>%   step_difftime(dates, time = as.Date(\"2010/1/1\"))  difftime_obj <- prep(rec)  bake(difftime_obj, new_data = NULL) #> # A tibble: 25 × 1 #>       dates #>       <dbl> #>  1        0 #>  2  7776000 #>  3 15638400 #>  4 23587200 #>  5 31536000 #>  6 39312000 #>  7 47174400 #>  8 55123200 #>  9 63072000 #> 10 70934400 #> # … with 15 more rows  recipe(~ dates, data = example_date) %>%   step_difftime(dates, time = as.Date(\"2010/1/1\"), unit = \"weeks\") %>%   prep() %>%   bake(new_data = NULL) #> # A tibble: 25 × 1 #>    dates #>    <dbl> #>  1   0   #>  2  12.9 #>  3  25.9 #>  4  39   #>  5  52.1 #>  6  65   #>  7  78   #>  8  91.1 #>  9 104.  #> 10 117.  #> # … with 15 more rows  recipe(~ datetimes, data = example_datetime) %>%   step_difftime(datetimes, time = ISOdate(1993,1,1), unit = \"secs\") %>%   prep() %>%   bake(new_data = NULL) #> # A tibble: 25 × 1 #>    datetimes #>        <dbl> #>  1         0 #>  2      3600 #>  3      7200 #>  4     10800 #>  5     14400 #>  6     18000 #>  7     21600 #>  8     25200 #>  9     28800 #> 10     32400 #> # … with 15 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform binary encoding of factor variables — step_encoding_binary","title":"Perform binary encoding of factor variables — step_encoding_binary","text":"step_encoding_binary creates specification recipe step perform binary encoding factor variables.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform binary encoding of factor variables — step_encoding_binary","text":"","code":"step_encoding_binary(   recipe,   ...,   role = NA,   trained = FALSE,   res = NULL,   columns = NULL,   keep_original_cols = FALSE,   skip = FALSE,   id = rand_id(\"encoding_binary\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform binary encoding of factor variables — step_encoding_binary","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. res list containing levels training variables stored preprocessing step trained prep(). columns character string variable names populated (eventually) terms argument. keep_original_cols logical keep original variables output. Defaults FALSE. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform binary encoding of factor variables — step_encoding_binary","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform binary encoding of factor variables — step_encoding_binary","text":"","code":"library(recipes) library(modeldata)  data(ames)  rec <- recipe(~ Land_Contour + Neighborhood, data = ames) %>%   step_encoding_binary(all_nominal_predictors()) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 2,930 × 9 #>    Land_Contou…¹ Land_…² Land_…³ Neigh…⁴ Neigh…⁵ Neigh…⁶ Neigh…⁷ Neigh…⁸ Neigh…⁹ #>            <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1             0       0       1       1       0       0       0       0       0 #>  2             0       0       1       1       0       0       0       0       0 #>  3             0       0       1       1       0       0       0       0       0 #>  4             0       0       1       1       0       0       0       0       0 #>  5             0       0       1       1       1       1       0       0       0 #>  6             0       0       1       1       1       1       0       0       0 #>  7             0       0       1       1       0       0       0       1       0 #>  8             0       1       0       1       0       0       0       1       0 #>  9             0       0       1       1       0       0       0       1       0 #> 10             0       0       1       1       1       1       0       0       0 #> # … with 2,920 more rows, and abbreviated variable names ¹​Land_Contour_1, #> #   ²​Land_Contour_2, ³​Land_Contour_4, ⁴​Neighborhood_1, ⁵​Neighborhood_2, #> #   ⁶​Neighborhood_4, ⁷​Neighborhood_8, ⁸​Neighborhood_16, ⁹​Neighborhood_32  tidy(rec, 1) #> # A tibble: 2 × 3 #>   terms        value id                    #>   <chr>        <int> <chr>                 #> 1 Land_Contour     4 encoding_binary_rWt0J #> 2 Neighborhood    29 encoding_binary_rWt0J"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform frequency encoding — step_encoding_frequency","title":"Perform frequency encoding — step_encoding_frequency","text":"step_encoding_frequency creates specification recipe step perform frequency encoding.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform frequency encoding — step_encoding_frequency","text":"","code":"step_encoding_frequency(   recipe,   ...,   role = NA,   trained = FALSE,   res = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"encoding_frequency\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform frequency encoding — step_encoding_frequency","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. res list frequencies levels training variables stored preprocessing step trained prep(). columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform frequency encoding — step_encoding_frequency","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_encoding_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform frequency encoding — step_encoding_frequency","text":"","code":"library(recipes) library(modeldata)  data(ames)  rec <- recipe(~ Land_Contour + Neighborhood, data = ames) %>%   step_encoding_frequency(all_nominal_predictors()) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 2,930 × 2 #>    Land_Contour Neighborhood #>           <dbl>        <dbl> #>  1       0.899        0.151  #>  2       0.899        0.151  #>  3       0.899        0.151  #>  4       0.899        0.151  #>  5       0.899        0.0563 #>  6       0.899        0.0563 #>  7       0.899        0.0174 #>  8       0.0410       0.0174 #>  9       0.899        0.0174 #> 10       0.899        0.0563 #> # … with 2,920 more rows  tidy(rec, 1) #> # A tibble: 33 × 4 #>    terms        level              frequency id                       #>    <chr>        <chr>                  <dbl> <chr>                    #>  1 Land_Contour Bnk                   0.0399 encoding_frequency_1nxRm #>  2 Land_Contour HLS                   0.0410 encoding_frequency_1nxRm #>  3 Land_Contour Low                   0.0205 encoding_frequency_1nxRm #>  4 Land_Contour Lvl                   0.899  encoding_frequency_1nxRm #>  5 Neighborhood North_Ames            0.151  encoding_frequency_1nxRm #>  6 Neighborhood College_Creek         0.0911 encoding_frequency_1nxRm #>  7 Neighborhood Old_Town              0.0816 encoding_frequency_1nxRm #>  8 Neighborhood Edwards               0.0662 encoding_frequency_1nxRm #>  9 Neighborhood Somerset              0.0621 encoding_frequency_1nxRm #> 10 Neighborhood Northridge_Heights    0.0567 encoding_frequency_1nxRm #> # … with 23 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_maxabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Max Abs Scaling — step_maxabs","title":"Perform Max Abs Scaling — step_maxabs","text":"step_maxabs creates specification recipe step perform Max Abs scaling.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_maxabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Max Abs Scaling — step_maxabs","text":"","code":"step_maxabs(   recipe,   ...,   role = NA,   trained = FALSE,   res = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"maxabs\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_maxabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Max Abs Scaling — step_maxabs","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. res list containing absolute max training variables stored preprocessing step trained prep(). columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_maxabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Max Abs Scaling — step_maxabs","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_maxabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Max Abs Scaling — step_maxabs","text":"","code":"library(recipes)  rec <- recipe(~., data = mtcars) %>%   step_maxabs(all_predictors()) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 0.619  0.75 0.339 0.328 0.791 0.483 0.719     0     1   0.8 0.5   #>  2 0.619  0.75 0.339 0.328 0.791 0.530 0.743     0     1   0.8 0.5   #>  3 0.673  0.5  0.229 0.278 0.781 0.428 0.813     1     1   0.8 0.125 #>  4 0.631  0.75 0.547 0.328 0.625 0.593 0.849     1     0   0.6 0.125 #>  5 0.552  1    0.763 0.522 0.639 0.634 0.743     0     0   0.6 0.25  #>  6 0.534  0.75 0.477 0.313 0.560 0.638 0.883     1     0   0.6 0.125 #>  7 0.422  1    0.763 0.731 0.651 0.658 0.692     0     0   0.6 0.5   #>  8 0.720  0.5  0.311 0.185 0.748 0.588 0.873     1     0   0.8 0.25  #>  9 0.673  0.5  0.298 0.284 0.795 0.581 1         1     0   0.8 0.25  #> 10 0.566  0.75 0.355 0.367 0.795 0.634 0.799     1     0   0.8 0.5   #> # … with 22 more rows  tidy(rec, 1) #> # A tibble: 11 × 4 #>    terms statistic  value id           #>    <chr> <chr>      <dbl> <chr>        #>  1 mpg   max        33.9  maxabs_CEIBs #>  2 cyl   max         8    maxabs_CEIBs #>  3 disp  max       472    maxabs_CEIBs #>  4 hp    max       335    maxabs_CEIBs #>  5 drat  max         4.93 maxabs_CEIBs #>  6 wt    max         5.42 maxabs_CEIBs #>  7 qsec  max        22.9  maxabs_CEIBs #>  8 vs    max         1    maxabs_CEIBs #>  9 am    max         1    maxabs_CEIBs #> 10 gear  max         5    maxabs_CEIBs #> 11 carb  max         8    maxabs_CEIBs"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Min Max Scaling — step_minmax","title":"Perform Min Max Scaling — step_minmax","text":"step_minmax creates specification recipe step perform Min Max scaling.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Min Max Scaling — step_minmax","text":"","code":"step_minmax(   recipe,   ...,   role = NA,   trained = FALSE,   res = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"minmax\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Min Max Scaling — step_minmax","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. res list containing min max training variables stored preprocessing step trained prep(). columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_minmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Min Max Scaling — step_minmax","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_minmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Min Max Scaling — step_minmax","text":"","code":"library(recipes)  rec <- recipe(~., data = mtcars) %>%   step_minmax(all_predictors()) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 32 × 11 #>      mpg   cyl   disp     hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 0.451   0.5 0.222  0.205  0.525 0.283 0.233     0     1   0.5 0.429 #>  2 0.451   0.5 0.222  0.205  0.525 0.348 0.3       0     1   0.5 0.429 #>  3 0.528   0   0.0920 0.145  0.502 0.206 0.489     1     1   0.5 0     #>  4 0.468   0.5 0.466  0.205  0.147 0.435 0.588     1     0   0   0     #>  5 0.353   1   0.721  0.435  0.180 0.493 0.3       0     0   0   0.143 #>  6 0.328   0.5 0.384  0.187  0     0.498 0.681     1     0   0   0     #>  7 0.166   1   0.721  0.682  0.207 0.526 0.160     0     0   0   0.429 #>  8 0.596   0   0.189  0.0353 0.429 0.429 0.655     1     0   0.5 0.143 #>  9 0.528   0   0.174  0.152  0.535 0.419 1         1     0   0.5 0.143 #> 10 0.374   0.5 0.241  0.251  0.535 0.493 0.452     1     0   0.5 0.429 #> # … with 22 more rows  tidy(rec, 1) #> # A tibble: 22 × 4 #>    terms statistic value id           #>    <chr> <chr>     <dbl> <chr>        #>  1 mpg   min       10.4  minmax_H87E7 #>  2 cyl   min        4    minmax_H87E7 #>  3 disp  min       71.1  minmax_H87E7 #>  4 hp    min       52    minmax_H87E7 #>  5 drat  min        2.76 minmax_H87E7 #>  6 wt    min        1.51 minmax_H87E7 #>  7 qsec  min       14.5  minmax_H87E7 #>  8 vs    min        0    minmax_H87E7 #>  9 am    min        0    minmax_H87E7 #> 10 gear  min        3    minmax_H87E7 #> # … with 12 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Robust Scaling — step_robust","title":"Perform Robust Scaling — step_robust","text":"step_robust creates specification recipe step perform Robust scaling.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Robust Scaling — step_robust","text":"","code":"step_robust(   recipe,   ...,   role = NA,   trained = FALSE,   range = c(0.25, 0.75),   res = NULL,   columns = NULL,   skip = FALSE,   id = rand_id(\"robust\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Robust Scaling — step_robust","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details. tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. range numeric vector 2 values denoting lower upper quantile used scaling. Defaults c(0.25, 0.75). res list containing 3 quantiles training variables stored preprocessing step trained prep(). columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Robust Scaling — step_robust","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_robust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Robust Scaling — step_robust","text":"scaling performed step done using following transformation $$x_new = (x - Q2(x)) / (Q3(x) - Q1(x))$$ Q2(x) median, Q3(x) upper quantile (defaults 0.75) Q1(x) lower quantile (defaults 0.25). upper lower quantiles can changed range argument.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_robust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Robust Scaling — step_robust","text":"","code":"library(recipes)  rec <- recipe(~., data = mtcars) %>%   step_robust(all_predictors()) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 32 × 11 #>        mpg   cyl   disp     hp     drat     wt   qsec    vs    am  gear  carb #>      <dbl> <dbl>  <dbl>  <dbl>    <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  0.244    0   -0.177 -0.156  0.244   -0.685 -0.623     0     1     0   1   #>  2  0.244    0   -0.177 -0.156  0.244   -0.437 -0.344     0     1     0   1   #>  3  0.488   -0.5 -0.430 -0.359  0.185   -0.977  0.448     1     1     0  -0.5 #>  4  0.298    0    0.301 -0.156 -0.732   -0.107  0.862     1     0    -1  -0.5 #>  5 -0.0678   0.5  0.798  0.623 -0.649    0.112 -0.344     0     0    -1   0   #>  6 -0.149    0    0.140 -0.216 -1.11     0.131  1.25      1     0    -1  -0.5 #>  7 -0.664    0.5  0.798  1.46  -0.577    0.238 -0.932     0     0    -1   1   #>  8  0.705   -0.5 -0.242 -0.731 -0.00595 -0.131  1.14      1     0     0   0   #>  9  0.488   -0.5 -0.271 -0.335  0.268   -0.170  2.59      1     0     0   0   #> 10  0        0   -0.140  0      0.268    0.112  0.294     1     0     0   1   #> # … with 22 more rows  tidy(rec, 1) #> # A tibble: 33 × 4 #>    terms statistic value id           #>    <chr> <chr>     <dbl> <chr>        #>  1 mpg   lower      15.4 robust_teM1M #>  2 mpg   median     19.2 robust_teM1M #>  3 mpg   higher     22.8 robust_teM1M #>  4 cyl   lower       4   robust_teM1M #>  5 cyl   median      6   robust_teM1M #>  6 cyl   higher      8   robust_teM1M #>  7 disp  lower     121.  robust_teM1M #>  8 disp  median    196.  robust_teM1M #>  9 disp  higher    326   robust_teM1M #> 10 hp    lower      96.5 robust_teM1M #> # … with 23 more rows  rec <- recipe(~., data = mtcars) %>%   step_robust(all_predictors(), range = c(0.1, 0.9)) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 32 × 11 #>        mpg   cyl    disp      hp     drat      wt   qsec    vs    am  gear #>      <dbl> <dbl>   <dbl>   <dbl>    <dbl>   <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1  0.114    0   -0.115  -0.0732  0.171   -0.337  -0.281     0     1   0   #>  2  0.114    0   -0.115  -0.0732  0.171   -0.215  -0.155     0     1   0   #>  3  0.229   -0.5 -0.280  -0.169   0.129   -0.480   0.202     1     1   0   #>  4  0.140    0    0.196  -0.0732 -0.512   -0.0526  0.388     1     0  -0.5 #>  5 -0.0317   0.5  0.519   0.293  -0.453    0.0550 -0.155     0     0  -0.5 #>  6 -0.0698   0    0.0910 -0.101  -0.778    0.0645  0.563     1     0  -0.5 #>  7 -0.311    0.5  0.519   0.687  -0.403    0.117  -0.420     0     0  -0.5 #>  8  0.330   -0.5 -0.157  -0.344  -0.00416 -0.0645  0.514     1     0   0   #>  9  0.229   -0.5 -0.176  -0.158   0.187   -0.0837  1.16      1     0   0   #> 10  0        0   -0.0910  0       0.187    0.0550  0.132     1     0   0   #> # … with 22 more rows, and 1 more variable: carb <dbl>  tidy(rec, 1) #> # A tibble: 33 × 4 #>    terms statistic value id           #>    <chr> <chr>     <dbl> <chr>        #>  1 mpg   lower      14.3 robust_zqwI0 #>  2 mpg   median     19.2 robust_zqwI0 #>  3 mpg   higher     30.1 robust_zqwI0 #>  4 cyl   lower       4   robust_zqwI0 #>  5 cyl   median      6   robust_zqwI0 #>  6 cyl   higher      8   robust_zqwI0 #>  7 disp  lower      80.6 robust_zqwI0 #>  8 disp  median    196.  robust_zqwI0 #>  9 disp  higher    396   robust_zqwI0 #> 10 hp    lower      66   robust_zqwI0 #> # … with 23 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_time_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicate Recurrent Date Time Event — step_time_event","title":"Indicate Recurrent Date Time Event — step_time_event","text":"step_time_event creates specification recipe step create new columns indicating date fall recurrent event.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_time_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicate Recurrent Date Time Event — step_time_event","text":"","code":"step_time_event(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   rules = list(),   columns = NULL,   skip = FALSE,   id = rand_id(\"time_event\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_time_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicate Recurrent Date Time Event — step_time_event","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. rules Named list almanac rules. columns character string variables used inputs. field placeholder populated prep.recipe() used. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_time_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicate Recurrent Date Time Event — step_time_event","text":"updated version recipe new check added sequence existing operations.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_time_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicate Recurrent Date Time Event — step_time_event","text":"","code":"library(recipes) library(extrasteps) library(almanac) library(modeldata)  data(Chicago)  on_easter <- yearly() %>% recur_on_easter() on_weekend <- weekly() %>% recur_on_weekends()  rules <- list(easter = on_easter, weekend = on_weekend)  rec_spec <- recipe(ridership ~ date, data = Chicago) %>%   step_time_event(date, rules = rules)  rec_spec_preped <- prep(rec_spec)  bake(rec_spec_preped, new_data = NULL) #> # A tibble: 5,698 × 3 #>    ridership date_easter date_weekend #>        <dbl> <lgl>       <lgl>        #>  1     15.7  FALSE       FALSE        #>  2     15.8  FALSE       FALSE        #>  3     15.9  FALSE       FALSE        #>  4     15.9  FALSE       FALSE        #>  5     15.4  FALSE       FALSE        #>  6      2.42 FALSE       TRUE         #>  7      1.47 FALSE       TRUE         #>  8     15.5  FALSE       FALSE        #>  9     15.9  FALSE       FALSE        #> 10     15.9  FALSE       FALSE        #> # … with 5,688 more rows"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_unit_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Unit Normalization — step_unit_normalize","title":"Perform Unit Normalization — step_unit_normalize","text":"step_unit_normalize creates specification recipe step perform unit normalization scaling individual samples unit norm.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_unit_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Unit Normalization — step_unit_normalize","text":"","code":"step_unit_normalize(   recipe,   ...,   role = NA,   trained = FALSE,   norm = c(\"l2\", \"l1\", \"max\"),   columns = NULL,   skip = FALSE,   id = rand_id(\"unit_normalize\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_unit_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Unit Normalization — step_unit_normalize","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables affected step. See selections() details.  tidy method, currently used. role used step since new variables created. trained logical indicate quantities preprocessing estimated. norm Character denoting type normalization perform. Must one \"l1\", \"l2\", \"\"max\". columns character string variable names populated (eventually) terms argument. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_unit_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Unit Normalization — step_unit_normalize","text":"updated version recipe new step added sequence existing steps (). tidy method, tibble columns terms (columns affected) base.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_unit_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Unit Normalization — step_unit_normalize","text":"","code":"library(recipes)  rec <- recipe(~., data = mtcars) %>%   step_unit_normalize(all_predictors()) %>%   prep()  rec %>%   bake(new_data = NULL) #> # A tibble: 32 × 11 #>       mpg    cyl  disp    hp    drat      wt   qsec      vs      am    gear #>     <dbl>  <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl> #>  1 0.107  0.0306 0.815 0.561 0.0199  0.0134  0.0839 0       0.00510 0.0204  #>  2 0.107  0.0306 0.815 0.560 0.0199  0.0146  0.0867 0       0.00509 0.0204  #>  3 0.156  0.0274 0.741 0.638 0.0264  0.0159  0.128  0.00686 0.00686 0.0274  #>  4 0.0759 0.0213 0.915 0.390 0.0109  0.0114  0.0689 0.00355 0       0.0106  #>  5 0.0466 0.0199 0.897 0.436 0.00785 0.00857 0.0424 0       0       0.00748 #>  6 0.0724 0.0240 0.900 0.420 0.0110  0.0138  0.0809 0.00400 0       0.0120  #>  7 0.0328 0.0183 0.825 0.562 0.00736 0.00819 0.0363 0       0       0.00688 #>  8 0.150  0.0246 0.903 0.381 0.0227  0.0196  0.123  0.00615 0       0.0246  #>  9 0.132  0.0231 0.814 0.549 0.0226  0.0182  0.132  0.00578 0       0.0231  #> 10 0.0915 0.0286 0.799 0.586 0.0187  0.0164  0.0872 0.00477 0       0.0191  #> # … with 22 more rows, and 1 more variable: carb <dbl>  tidy(rec, 1) #> # A tibble: 11 × 2 #>    terms id                   #>    <chr> <chr>                #>  1 mpg   unit_normalize_lOxF2 #>  2 cyl   unit_normalize_lOxF2 #>  3 disp  unit_normalize_lOxF2 #>  4 hp    unit_normalize_lOxF2 #>  5 drat  unit_normalize_lOxF2 #>  6 wt    unit_normalize_lOxF2 #>  7 qsec  unit_normalize_lOxF2 #>  8 vs    unit_normalize_lOxF2 #>  9 am    unit_normalize_lOxF2 #> 10 gear  unit_normalize_lOxF2 #> 11 carb  unit_normalize_lOxF2"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_yeet.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes date and datetimes variables — step_yeet","title":"Removes date and datetimes variables — step_yeet","text":"step_yeet creates specification recipe step remove date datetime variables. (meme)","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_yeet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes date and datetimes variables — step_yeet","text":"","code":"step_yeet(   recipe,   ...,   role = NA,   trained = FALSE,   removals = NULL,   skip = FALSE,   id = rand_id(\"yeet\") )"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_yeet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes date and datetimes variables — step_yeet","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. role used step since new variables created. trained logical indicate quantities preprocessing estimated. removals character string contains names columns removed. values determined prep.recipe() called. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_yeet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes date and datetimes variables — step_yeet","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/step_yeet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes date and datetimes variables — step_yeet","text":"","code":"library(recipes) dat <- data.frame(   dt = as.POSIXct(\"2012-01-15\"),   d = as.Date(\"2020-01-01\"),   n = 4,   c = \"h\" )  recipe(~., data = dat) %>%   step_yeet() %>%   prep() %>%   bake(new_data = NULL) #> # A tibble: 1 × 3 #>   dt                      n c     #>   <dttm>              <dbl> <fct> #> 1 2012-01-15 00:00:00     4 h"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/tidy.recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy the Result of a Recipe — tidy.step_combine_stringdist","title":"Tidy the Result of a Recipe — tidy.step_combine_stringdist","text":"tidy return data frame contains information regarding recipe operation within recipe (tidy method operation exists). See recipes::tidy.recipe information.","code":""},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/tidy.recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy the Result of a Recipe — tidy.step_combine_stringdist","text":"","code":"# S3 method for step_combine_stringdist tidy(x, ...)  # S3 method for step_date_after tidy(x, ...)  # S3 method for step_date_before tidy(x, ...)  # S3 method for step_date_nearest tidy(x, ...)  # S3 method for step_difftime tidy(x, ...)  # S3 method for step_encoding_binary tidy(x, ...)  # S3 method for step_encoding_frequency tidy(x, ...)  # S3 method for step_maxabs tidy(x, ...)  # S3 method for step_minmax tidy(x, ...)  # S3 method for step_robust tidy(x, ...)  # S3 method for step_time_event tidy(x, ...)  # S3 method for step_unit_normalize tidy(x, ...)  # S3 method for step_yeet tidy(x, ...)"},{"path":"https://emilhvitfeldt.github.io/extrasteps/reference/tidy.recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy the Result of a Recipe — tidy.step_combine_stringdist","text":"x step_yeet object. ... currently used.","code":""}]
